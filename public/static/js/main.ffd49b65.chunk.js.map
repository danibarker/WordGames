{"version":3,"sources":["styled components/Deadends/index.js","components/Deadends/ws.js","redux/actions.js","components/Chat/index.js","components/Deadends/index.js","components/Anagrams/index.js","App.js","redux/reducer.js","reportWebVitals.js","index.js"],"names":["components","PlayersDiv","styled","div","GuessDiv","CurrentWord","h3","Main","Logout","Login","Game","RightPanel","OnTurn","NameInput","input","GuessButton","button","GuessInput","Title","Guessed","tbody","Timer","callback","timerCalc","this","timer","tries","clearTimeout","setTimeout","CustomSocket","url","messageFunction","customSocket","socketUrl","reconnectTimer","disconnect","connect","reconnectAfterMs","WebSocket","onopen","event","console","log","onclose","scheduleTimeout","onerror","onmessage","close","message","send","getGameState","gameState","dispatch","a","type","payload","ChatInput","ChatWindow","props","visible","ChatBubble","radius","top","Chat","client","username","useState","chatOpen","setChatOpen","chatlog","useSelector","state","onClick","cur","style","height","borderStyle","borderColor","overflow","padding","lineHeight","split","map","index","marginBlockEnd","onKeyPress","e","key","target","value","JSON","stringify","data","placeholder","host","window","location","href","Deadends","word","setWord","useDispatch","validate","response","parse","loginAction","then","refresh","logoutAction","startAction","useEffect","login","loggedIn","guess","className","currentWord","players","playerOnTurn","name","onKeyUp","onChange","id","marginRight","guessed","player","color","textAlign","setUsername","replace","App","path","exact","component","Anagrams","initState","user","numPlayers","fails","reducer","action","newState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.ffd49b65.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nlet components = {\r\n    PlayersDiv: styled.div`\r\n        td,\r\n        th {\r\n            filter: invert(0);\r\n            color: #dddddd;\r\n        }\r\n        @media only screen and (max-height: 600px) {\r\n            position: absolute;\r\n            top: -1000px;\r\n        }\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            margin-top: 20px;\r\n            margin-bottom: 45px;\r\n            text-align: center;\r\n            width: 100%;\r\n            height: 200px;\r\n            overflow-y: scroll;\r\n\r\n            &::-webkit-scrollbar {\r\n                width: 12px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-track {\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n                border-radius: 10px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-thumb {\r\n                border-radius: 10px;\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);\r\n            }\r\n        }\r\n    `,\r\n    GuessDiv: styled.div`\r\n        td {\r\n            color: #dddddd;\r\n        }\r\n        h2 {\r\n            filter: invert(0);\r\n            color: #dddddd;\r\n        }\r\n        height: 90%;\r\n        overflow-y: scroll;\r\n        &::-webkit-scrollbar {\r\n            width: 12px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-track {\r\n            box-shadow: inset 0 0 6px rgba(245, 0, 0, 0.5);\r\n            -webkit-box-shadow: inset 0 0 6px rgba(245, 0, 0, 0.5);\r\n            border-radius: 10px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.75);\r\n            box-shadow: inset 0 0 6px rgba(245, 0, 0, 0.75);\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            height: 100%;\r\n            overflow-y: scroll;\r\n        }\r\n    `,\r\n    CurrentWord: styled.h3``,\r\n\r\n    Main: styled.div`\r\n        display: flex;\r\n        justify-content: space-around;\r\n        height: 100%;\r\n        @media only screen and (min-width: 501px) {\r\n            margin-top: 150px;\r\n            display: flex;\r\n            justify-content: space-around;\r\n            height: 75%;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            height: 100%;\r\n            width: 100%;\r\n\r\n            flex-direction: column;\r\n        }\r\n    `,\r\n    Logout: styled.div`\r\n        z-index: 3;\r\n        position: absolute;\r\n        bottom: 20px;\r\n        left: 20px;\r\n        filter: invert(0);\r\n        @media only screen and (max-height: 620px) {\r\n            right: 10px;\r\n            left: unset;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            bottom: 0px;\r\n\r\n            button {\r\n                height: 50px;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n    `,\r\n    Login: styled.div`\r\n        padding: 25% 0 0 0;\r\n        filter: invert(0);\r\n        width: 100%;\r\n        z-index: 3;\r\n        position: absolute;\r\n        height: 100%;\r\n        text-align: center;\r\n\r\n        @media only screen and (max-width: 500px) {\r\n            padding: 40% 3%;\r\n\r\n            input {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n            button {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n        }\r\n    `,\r\n    Game: styled.div`\r\n        h5 {\r\n            color: #dddddd;\r\n        }\r\n        width: 33%;\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 300px;\r\n            text-align: center;\r\n        }\r\n    `,\r\n    RightPanel: styled.div`\r\n        max-height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 200px;\r\n            text-align: center;\r\n            max-height: unset;\r\n            display: unset;\r\n            flex-direction: unset;\r\n            align-items: unset;\r\n            justify-content: unset;\r\n            margin-top: unset;\r\n        }\r\n    `,\r\n    OnTurn: styled.div`\r\n        color: white;\r\n        @media only screen and (min-width: 501px) {\r\n            font-size: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            font-size: 30px;\r\n        }\r\n    `,\r\n    NameInput: styled.input`\r\n        @media only screen and (min-width: 501px) {\r\n            height: 50px;\r\n            font-size: 15px;\r\n        }\r\n    `,\r\n    GuessButton: styled.button`\r\n        @media only screen and (max-height: 450px) {\r\n            position: absolute;\r\n            top: -1000px;\r\n        }\r\n        @media only screen and (min-width: 501px) {\r\n            margin: 10px 0 10px 0;\r\n            width: 100%;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 50px;\r\n            margin-bottom: 20px;\r\n        }\r\n    `,\r\n    GuessInput: styled.input`\r\n        @media only screen and (min-width: 501px) {\r\n            padding-left: 10px;\r\n            height: 50px;\r\n            font-size: 20px;\r\n            width: 100%;\r\n        }\r\n\r\n        @media only screen and (max-width: 500px) {\r\n            height: 50px;\r\n            width: 100%;\r\n        }\r\n    `,\r\n    Title: styled.div`\r\n        @media only screen and (min-width: 501px) {\r\n            position: absolute;\r\n\r\n            text-align: center;\r\n\r\n            width: 100%;\r\n            h1 {\r\n                font-size: 100px;\r\n                color: #333333;\r\n            }\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            h1 {\r\n                color: #dddddd;\r\n            }\r\n            position: absolute;\r\n        }\r\n    `,\r\n\r\n    Guessed: styled.tbody`\r\n        @media only screen and (max-width: 500px) {\r\n            font-size: 30px;\r\n        }\r\n    `,\r\n};\r\nexport default components;\r\n","class Timer {\r\n    constructor(callback, timerCalc) {\r\n        this.callback = callback;\r\n        this.timerCalc = timerCalc;\r\n        this.timer = null;\r\n        this.tries = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.tries = 0;\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    scheduleTimeout() {\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.tries = this.tries + 1;\r\n            this.callback();\r\n        }, this.timerCalc(this.tries + 1));\r\n    }\r\n}\r\nexport default class CustomSocket {\r\n    // Constructor which takes socket URL as parameter\r\n    constructor(url, messageFunction) {\r\n        this.customSocket = null;\r\n        this.socketUrl = url;\r\n        this.reconnectTimer = new Timer(() => {\r\n            this.disconnect();\r\n            this.connect();\r\n        }, this.reconnectAfterMs);\r\n        this.messageFunction = messageFunction;\r\n    }\r\n\r\n    // Reconnect time intervals based on tries\r\n    reconnectAfterMs(tries) {\r\n        return [1000, 2000, 5000, 10000][tries - 1] || 10000;\r\n    }\r\n\r\n    // Create socket and define socket methods\r\n    connect() {\r\n        // Create new socket\r\n        this.customSocket = new WebSocket(this.socketUrl);\r\n\r\n        // onopen - called when connection is open and ready to send and receive data.\r\n        this.customSocket.onopen = (event) => {\r\n            console.log(\"connected to \" + this.socketUrl);\r\n        };\r\n\r\n        // onclsoe - called when the connection's closes.\r\n        this.customSocket.onclose = (event) => {\r\n            // On connection close try again to connect\r\n            this.reconnectTimer.scheduleTimeout();\r\n        };\r\n\r\n        // onerror - called when an error occurs.\r\n        this.customSocket.onerror = (event) => {};\r\n\r\n        // onmessage - called when a message is received from the server.\r\n        this.customSocket.onmessage = this.messageFunction;\r\n    }\r\n\r\n    // close socket connection\r\n    disconnect() {\r\n        // resetting in close method to stop timer on disconnect\r\n        this.customSocket.onclose = function () {};\r\n        // Closing socket\r\n        this.customSocket.close();\r\n    }\r\n    send(message) {\r\n        this.customSocket.send(message);\r\n    }\r\n}\r\n","export const startAction = (gameState) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\"http://localhost:5001/start\");\r\n        dispatch({\r\n            type: \"START\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\nexport const setUsername = (username) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: \"USERNAME\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\nexport const chatAction = (chatlog) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: \"CHAT\",\r\n            payload: chatlog,\r\n        });\r\n    };\r\n};\r\nexport const loginAction = (username) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\r\n        //     `http://localhost:5001/login/${username}`\r\n        // );\r\n        // let name = response.data;\r\n        dispatch({\r\n            type: \"LOGIN\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\nexport const logoutAction = (username) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: \"LOGOUT\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\n\r\nexport const guessAction = (validate) => {\r\n    return async (dispatch) => {\r\n        // const body = { name: player, guess: word };\r\n        // let response = await Axios.post(\"http://localhost:5001/guess\", body);\r\n        //response example {loseTurn:false,valid:false,message:\"Reset\"}\r\n\r\n        dispatch({\r\n            type: \"GUESS\",\r\n            payload: validate,\r\n        });\r\n    };\r\n};\r\n\r\nexport const getGameState = (gameState) => {\r\n    return async (dispatch) => {\r\n        // const response = await Axios.get(\"http://localhost:5001/gameState\");\r\n        // const data = response.data\r\n\r\n        dispatch({\r\n            type: \"GET_GAME_STATE\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\n\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Chat = ({ client, username }) => {\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const chatlog = useSelector((state) => state.chatlog);\r\n    const sendChat = (message) => {\r\n        client.send(\r\n            JSON.stringify({\r\n                type: \"CHAT\",\r\n                data: { username: username, message: message },\r\n            })\r\n        );\r\n    };\r\n    return (\r\n        <>\r\n            <ChatBubble\r\n                onClick={() => {\r\n                    setChatOpen((cur) => !cur);\r\n                }}\r\n                visible={\"visible\"}\r\n                top={chatOpen ? 0 : 50}\r\n            />\r\n            <ChatWindow visible={chatOpen ? \"visible\" : \"hidden\"}>\r\n                <div\r\n                    style={{\r\n                        height: \"70%\",\r\n                        borderStyle: \"solid\",\r\n                        borderColor: \"#e28430\",\r\n                        overflow: \"scroll\",\r\n                        padding: \"10px 0 0 5px\",\r\n    lineHeight: \".75\"\r\n                    }}\r\n                >\r\n                    {chatlog.split(\"\\n\").map((message,index) => (\r\n                        <>\r\n                            <p style={{ marginBlockEnd: index%2 + \"rem\" }}>{message} </p>\r\n                        </>\r\n                    ))}\r\n                </div>\r\n                <ChatInput\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            sendChat(e.target.value);\r\n                            e.target.value = \"\";\r\n                        }\r\n                    }}\r\n                    placeholder=\"Chat\"\r\n                />\r\n            </ChatWindow>\r\n        </>\r\n    );\r\n};\r\nlet ChatInput = styled.input`\r\n    width: 100%;\r\n    height: 50px;\r\n`;\r\nlet ChatWindow = styled.div`\r\n    width: 100%;\r\n    height: 80%;\r\n\r\n    top: 45px;\r\n    z-index: 4;\r\n    background-color: black;\r\n    position: absolute;\r\n    visibility: ${(props) => props.visible || \"hidden\"};\r\n    color: #1f9bcf;\r\n    font-size: 20px;\r\n    font-weight: 600;\r\n`;\r\nlet ChatBubble = styled.div`\r\n    border-radius: ${(props) => props.radius || 50}%;\r\n    width: 45px;\r\n    height: 45px;\r\n    position: absolute;\r\n    border-style: solid;\r\n    border-color: red;\r\n    z-index: 5;\r\n    background-color: black;\r\n    right: 0;\r\n    top: ${(props) => props.top}%;\r\n    visibility: ${(props) => props.visible || \"hidden\"};\r\n`;\r\nexport default Chat;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Styles from \"../../styled components/Deadends\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { w3cwebsocket as WS } from \"websocket\";\r\n\r\nimport CustomSocket from \"./ws\";\r\nimport {\r\n    loginAction,\r\n    logoutAction,\r\n    guessAction,\r\n    getGameState,\r\n    startAction,\r\n    chatAction,\r\n    setUsername,\r\n} from \"../../redux/actions\";\r\nimport Chat from \"../Chat\";\r\n\r\nlet host = window.location.href;\r\nhost = host.replace(\"http\", \"ws\");\r\nhost = host.replace(\"3000\", \"5002\");\r\n\r\nexport default function Deadends() {\r\n    const gameState = useSelector((state) => state.gameState);\r\n    const username = useSelector((state) => state.username);\r\n    // const [username, setUsername] = useState(\"\");\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const [word, setWord] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    function messageFunction(message) {\r\n        let response = JSON.parse(message.data);\r\n        switch (response.type) {\r\n            case \"CHAT\":\r\n                dispatch(chatAction(response.data));\r\n                break;\r\n            case \"RESET\":\r\n                dispatch(getGameState(response.data));\r\n                break;\r\n            case \"LOGIN\":\r\n                dispatch(loginAction(response.data));\r\n\r\n                break;\r\n            case \"GUESS\":\r\n                dispatch(guessAction(response.data)).then(() => {\r\n                    refresh();\r\n                });\r\n                break;\r\n            case \"GAME_STATE\":\r\n                dispatch(getGameState(response.data));\r\n                break;\r\n            case \"LOGOUT\":\r\n                dispatch(logoutAction(response.data));\r\n\r\n                break;\r\n            case \"START\":\r\n                dispatch(startAction(response.data));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        dispatch(getGameState(response.data));\r\n    }\r\n    const [client, setClient] = useState(\r\n        new CustomSocket(host, messageFunction)\r\n    );\r\n    useEffect(() => {\r\n        client.connect();\r\n    }, [client]);\r\n    const login = () => {\r\n        client.send(JSON.stringify({ type: \"LOGIN\", data: username }));\r\n    };\r\n\r\n    const loggedIn = useSelector((state) => state.loggedIn);\r\n    const refresh = () => {\r\n        client.send(JSON.stringify({ type: \"GAME_STATE\", data: gameState }));\r\n    };\r\n    const guess = () => {\r\n        client.send(\r\n            JSON.stringify({\r\n                type: \"GUESS\",\r\n                data: { username: username, guess: word },\r\n            })\r\n        );\r\n    };\r\n    const reset = () => {\r\n        client.send(JSON.stringify({ type: \"RESET\" }));\r\n    };\r\n    const logout = () => {\r\n        client.send(JSON.stringify({ type: \"LOGOUT\", data: username }));\r\n    };\r\n    const start = () => {\r\n        client.send(JSON.stringify({ type: \"START\" }));\r\n    };\r\n    // return !gameState.players ? (\r\n    //     <></>\r\n    // ) : (\r\n    return (\r\n        <>\r\n            <Chat client={client} username={username} />\r\n            {!loggedIn ? (\r\n                <Styles.Login>\r\n                    <h1 style={{ color: \"#DDDDDD\", textAlign: \"center\" }}>\r\n                        {username}\r\n                    </h1>\r\n                    <Styles.NameInput\r\n                        onKeyUp={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                login();\r\n                            }\r\n                        }}\r\n                        onChange={(e) => {\r\n                            dispatch(setUsername(e.target.value));\r\n                        }}\r\n                        type=\"text\"\r\n                    />\r\n                    <button\r\n                        className=\"btn btn-info\"\r\n                        onClick={() => {\r\n                            login();\r\n                        }}\r\n                    >\r\n                        Login\r\n                    </button>\r\n                </Styles.Login>\r\n            ) : (\r\n                <>\r\n                    <Styles.Title\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        <h1>Deadends</h1>]\r\n                    </Styles.Title>\r\n                    <Styles.Logout\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => {\r\n                                logout();\r\n                            }}\r\n                        >\r\n                            Leave\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={() => {\r\n                                start();\r\n                            }}\r\n                        >\r\n                            Join Game\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={() => {\r\n                                reset();\r\n                            }}\r\n                        >\r\n                            Reset All\r\n                        </button>\r\n                    </Styles.Logout>\r\n                    <Styles.Main\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        <Styles.Game>\r\n                            <Styles.CurrentWord>\r\n                                Current Word: {gameState.currentWord}\r\n                                <br />\r\n                                On Turn:\r\n                                {gameState.players\r\n                                    ? gameState.players[gameState.playerOnTurn]\r\n                                        ? gameState.players[\r\n                                              gameState.playerOnTurn\r\n                                          ].name\r\n                                        : \"\"\r\n                                    : \"\"}\r\n                            </Styles.CurrentWord>\r\n\r\n                            <Styles.GuessInput\r\n                                onKeyUp={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        guess();\r\n                                        e.target.value = \"\";\r\n                                    }\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    setWord(e.target.value);\r\n                                }}\r\n                                placeholder={\r\n                                    gameState.players\r\n                                        ? gameState.players[\r\n                                              gameState.playerOnTurn\r\n                                          ]\r\n                                            ? gameState.players[\r\n                                                  gameState.playerOnTurn\r\n                                              ].name === username\r\n                                                ? \"Your turn.  Enter Guess\"\r\n                                                : gameState.players[\r\n                                                      gameState.playerOnTurn\r\n                                                  ].name +\r\n                                                  \"'s turn.  Please Wait\"\r\n                                            : \"\"\r\n                                        : \"\"\r\n                                }\r\n                            />\r\n                            <Styles.GuessButton\r\n                                onClick={() => {\r\n                                    guess();\r\n                                }}\r\n                                className=\"btn btn-info\"\r\n                            >\r\n                                Guess\r\n                            </Styles.GuessButton>\r\n\r\n                            <h3 id=\"message\">{gameState.message || \"\"}</h3>\r\n                        </Styles.Game>\r\n                        <Styles.RightPanel>\r\n                            <Styles.GuessDiv>\r\n                                <h2 style={{ marginRight: \"20px\" }}>\r\n                                    Guessed words\r\n                                </h2>\r\n                                <table>\r\n                                    <Styles.Guessed>\r\n                                        {gameState.guessed ? (\r\n                                            gameState.guessed.map((guess) => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>{guess}</td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </Styles.Guessed>\r\n                                </table>\r\n                            </Styles.GuessDiv>\r\n                        </Styles.RightPanel>\r\n                        <Styles.PlayersDiv>\r\n                            <h3>Players logged in</h3>\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td>Name</td>\r\n                                    </tr>\r\n                                    {gameState.players ? (\r\n                                        gameState.players.map((player) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>{player.name}</td>\r\n                                                </tr>\r\n                                            );\r\n                                        })\r\n                                    ) : (\r\n                                        <></>\r\n                                    )}\r\n                                </thead>\r\n                                <tbody id=\"players\"></tbody>\r\n                            </table>\r\n                        </Styles.PlayersDiv>\r\n                    </Styles.Main>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n//import { useSelector } from \"react-redux\";\r\n\r\n\r\nexport default  () => {\r\n    return (\r\n        \r\n        < > </>\r\n        )\r\n}","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './components/Home'\r\nimport Deadends from './components/Deadends/index'\r\nimport Anagrams from './components/Anagrams'\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            \r\n                <Switch>\r\n                   \r\n                    <Route path=\"/\" exact component={Deadends} />\r\n                    <Route path=\"/deadend\" exact component={Deadends} />\r\n                    <Route path=\"/anagrams\" exact component={Anagrams} />\r\n                </Switch>\r\n            \r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const initState = {\r\n    message: \"\",\r\n    username: \"\",\r\n    user: {},\r\n    chatlog: \"\",\r\n    gameState: {\r\n        numPlayers: 0,\r\n        playerOnTurn: 0,\r\n        currentWord: \"\",\r\n        guessed: [],\r\n        players: [],\r\n        fails: [],\r\n        message: \"\",\r\n    },\r\n    loggedIn: false,\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case \"USERNAME\":\r\n            newState.username = action.payload;\r\n            return newState;\r\n        case \"CHAT\":\r\n            newState.chatlog = action.payload;\r\n            return newState;\r\n        case \"START\":\r\n            newState.gameState = action.payload;\r\n            return newState;\r\n        case \"LOGIN\":\r\n            if (newState.username === action.payload) {\r\n                newState.user = { name: action.payload };\r\n                newState.loggedIn = true;\r\n            }\r\n\r\n            return newState;\r\n        case \"LOGOUT\":\r\n            if (action.payload === newState.username) {\r\n                newState.user = {};\r\n                newState.username = \"\";\r\n                newState.loggedIn = false;\r\n                newState.message = \"\";\r\n            }\r\n            return newState;\r\n        case \"GUESS\":\r\n            newState.message = action.payload;\r\n            return newState;\r\n        case \"GET_GAME_STATE\":\r\n            newState.gameState = action.payload;\r\n            if (action.payload.numPlayers === 0) {\r\n                newState.loggedIn = false;\r\n                newState.message = \"\";\r\n                newState.user = {};\r\n            }\r\n            return newState;\r\n        default:\r\n            return newState;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./redux/reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}