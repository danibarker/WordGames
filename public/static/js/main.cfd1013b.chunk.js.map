{"version":3,"sources":["styled components/Deadends/index.js","redux/actions.js","components/Deadends/index.js","components/Anagrams/index.js","App.js","redux/reducer.js","reportWebVitals.js","index.js"],"names":["components","PlayersDiv","styled","div","GuessDiv","CurrentWord","h3","Main","Logout","Login","Game","RightPanel","OnTurn","NameInput","input","GuessButton","button","GuessInput","Title","Guessed","tbody","getGameState","gameState","dispatch","a","type","payload","client","WS","Deadends","useSelector","state","useState","username","setUsername","word","setWord","useDispatch","onmessage","message","validate","response","JSON","parse","data","console","log","loginAction","refresh","then","startAction","login","send","stringify","loggedIn","guess","className","onClick","currentWord","players","playerOnTurn","name","onKeyUp","e","key","target","value","onChange","placeholder","id","style","marginRight","guessed","map","player","color","textAlign","onopen","App","path","exact","component","Anagrams","initState","user","numPlayers","fails","reducer","action","newState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.cfd1013b.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nlet components = {\r\n    PlayersDiv: styled.div`\r\n        td,\r\n        th {\r\n            filter: invert(0);\r\n            color: #dddddd;\r\n        }\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            margin-top: 20px;\r\n            margin-bottom: 45px;\r\n            text-align: center;\r\n            width: 100%;\r\n            height: 200px;\r\n            overflow-y: scroll;\r\n\r\n            &::-webkit-scrollbar {\r\n                width: 12px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-track {\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n                border-radius: 10px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-thumb {\r\n                border-radius: 10px;\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);\r\n            }\r\n        }\r\n    `,\r\n    GuessDiv: styled.div`\r\n        td {\r\n            color: #dddddd;\r\n        }\r\n        h2 {\r\n            filter: invert(0);\r\n            color: #dddddd;\r\n        }\r\n        height: 90%;\r\n        overflow-y: scroll;\r\n        &::-webkit-scrollbar {\r\n            width: 12px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-track {\r\n            box-shadow:inset 0 0 6px rgba(245, 0, 0, 0.5);\r\n            -webkit-box-shadow: inset 0 0 6px rgba(245, 0, 0, 0.5);\r\n            border-radius: 10px;\r\n        }\r\n\r\n        &::-webkit-scrollbar-thumb {\r\n            border-radius: 10px;\r\n            -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.75);\r\n            box-shadow: inset 0 0 6px rgba(245, 0, 0, 0.75);\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            height: 100%;\r\n            overflow-y: scroll;\r\n        }\r\n    `,\r\n    CurrentWord: styled.h3``,\r\n\r\n    Main: styled.div`\r\n        display: flex;\r\n        justify-content: space-around;\r\n        height: 100%;\r\n        @media only screen and (min-width: 501px) {\r\n            margin-top: 150px;\r\n            display: flex;\r\n            justify-content: space-around;\r\n            height: 75%;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            display: flex;\r\n            justify-content: space-around;\r\n            height: 100%;\r\n            width: 100%;\r\n\r\n            flex-direction: column;\r\n        }\r\n    `,\r\n    Logout: styled.div`\r\n        z-index: 3;\r\n        position: absolute;\r\n        bottom: 20px;\r\n        left: 20px;\r\n        filter:invert(0);\r\n\r\n        @media only screen and (max-width: 500px) {\r\n            bottom: 0px;\r\n\r\n            button {\r\n                height: 50px;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n    `,\r\n    Login: styled.div`\r\n        padding: 25% 0 0 0;\r\n        filter:invert(0);\r\n        width: 100%;\r\n        z-index: 3;\r\n        position: absolute;\r\n        height: 100%;\r\n        text-align: center;\r\n        \r\n        @media only screen and (max-width: 500px) {\r\n            padding: 40% 3%;\r\n\r\n            input {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n            button {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n        }\r\n    `,\r\n    Game: styled.div`\r\n        h5 {\r\n            color: #dddddd;\r\n        }\r\n        width: 33%;\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 300px;\r\n            text-align: center;\r\n        }\r\n    `,\r\n    RightPanel: styled.div`\r\n        max-height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        @media only screen and (min-width: 501px) {\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 200px;\r\n            text-align: center;\r\n            max-height: unset;\r\n            display: unset;\r\n            flex-direction: unset;\r\n            align-items: unset;\r\n            justify-content: unset;\r\n            margin-top: unset;\r\n        }\r\n    `,\r\n    OnTurn: styled.div`\r\n        color:white;\r\n        @media only screen and (min-width: 501px) {\r\n            font-size: 20px;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            font-size: 30px;\r\n        }\r\n    `,\r\n    NameInput: styled.input`\r\n        @media only screen and (min-width: 501px) {\r\n            height: 50px;\r\n            font-size: 15px;\r\n        }\r\n    `,\r\n    GuessButton: styled.button`\r\n        @media only screen and (min-width: 501px) {\r\n            margin: 10px 0 10px 0;\r\n            width: 100%;\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            width: 100%;\r\n            height: 50px;\r\n            margin-bottom: 20px;\r\n        }\r\n    `,\r\n    GuessInput: styled.input`\r\n        @media only screen and (min-width: 501px) {\r\n            padding-left: 10px;\r\n            height: 50px;\r\n            font-size: 20px;\r\n            width: 100%;\r\n        }\r\n\r\n        @media only screen and (max-width: 500px) {\r\n            height: 50px;\r\n            width: 100%;\r\n        }\r\n    `,\r\n    Title: styled.div`\r\n        @media only screen and (min-width: 501px) {\r\n            position: absolute;\r\n\r\n            text-align: center;\r\n\r\n            width: 100%;\r\n            h1 {\r\n                font-size: 100px;\r\n                color: #333333;\r\n            }\r\n        }\r\n        @media only screen and (max-width: 500px) {\r\n            h1 {\r\n                color: #dddddd;\r\n            }\r\n            position: absolute;\r\n        }\r\n    `,\r\n\r\n    Guessed: styled.tbody`\r\n        @media only screen and (max-width: 500px) {\r\n            font-size: 30px;\r\n        }\r\n    `,\r\n};\r\nexport default components;\r\n","export const startAction = (gameState) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\"http://localhost:5001/start\");\r\n        console.log(\"dispatching start action\", gameState);\r\n        dispatch({\r\n            type: \"START\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\nexport const loginAction = (username) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\r\n        //     `http://localhost:5001/login/${username}`\r\n        // );\r\n        // console.log(response);\r\n        // let name = response.data;\r\n\r\n        dispatch({\r\n            type: \"LOGIN\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\nexport const logoutAction = () => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: \"LOGOUT\",\r\n        });\r\n    };\r\n};\r\n\r\nexport const guessAction = (validate) => {\r\n    return async (dispatch) => {\r\n        // const body = { name: player, guess: word };\r\n        // let response = await Axios.post(\"http://localhost:5001/guess\", body);\r\n        //response example {loseTurn:false,valid:false,message:\"Reset\"}\r\n\r\n        dispatch({\r\n            type: \"GUESS\",\r\n            payload: validate,\r\n        });\r\n    };\r\n};\r\n\r\nexport const getGameState = (gameState) => {\r\n    return async (dispatch) => {\r\n        // const response = await Axios.get(\"http://localhost:5001/gameState\");\r\n        // const data = response.data\r\n\r\n        dispatch({\r\n            type: \"GET_GAME_STATE\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Styles from \"../../styled components/Deadends\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport Axios from \"axios\";\r\nimport { w3cwebsocket as WS } from \"websocket\";\r\n\r\nimport {\r\n    loginAction,\r\n    logoutAction,\r\n    guessAction,\r\n    getGameState,\r\n    startAction,\r\n} from \"../../redux/actions\";\r\nconst client = new WS(\"wss://wordgamesonlinews.herokuapp.com/\");\r\nclient.onopen = () => {\r\n    console.log(\"WebSocket Client Connected\");\r\n};\r\n\r\nexport default function Deadends() {\r\n    const gameState = useSelector((state) => state.gameState);\r\n    const [username, setUsername] = useState(\"\");\r\n   \r\n    const [word, setWord] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    client.onmessage = (message) => {\r\n        let response = JSON.parse(message.data);\r\n        console.log('response',response)\r\n        \r\n        switch (response.type) {\r\n            case \"LOGIN\":\r\n                if (response.data === username) {\r\n                    dispatch(loginAction(response.data));\r\n                } else {\r\n                    refresh()\r\n                }\r\n                break;\r\n            case \"GUESS\":\r\n                dispatch(guessAction(response.data)).then(() => {\r\n                    refresh();\r\n                });\r\n                break;\r\n            case \"GAME_STATE\":\r\n                dispatch(getGameState(response.data));\r\n                break\r\n            case \"LOGOUT\":\r\n                if (response.data === username) {\r\n                    dispatch(logoutAction());\r\n                } else {\r\n                    refresh()\r\n                }\r\n             \r\n                break\r\n            case \"START\":\r\n                dispatch(startAction(response.data));\r\n                \r\n                break\r\n            default:\r\n                break;\r\n        }\r\n        dispatch(getGameState(JSON.parse(message.data)));\r\n    };\r\n    const login = () => {\r\n        client.send(JSON.stringify({ type: \"LOGIN\", data: username }));\r\n    };\r\n\r\n    const loggedIn = useSelector((state) => state.loggedIn);\r\n    const refresh = () => {\r\n        client.send(JSON.stringify({type:\"GAME_STATE\",data:gameState}))\r\n        \r\n    };\r\n    const guess = () => {\r\n        client.send(\r\n            JSON.stringify({\r\n                type: \"GUESS\",\r\n                data: { username: username, guess: word },\r\n            })\r\n        );\r\n    };\r\n\r\n    const logout = () => {\r\n        client.send(JSON.stringify({ type: \"LOGOUT\", data: username }));\r\n        \r\n    };\r\n    const start = () => {\r\n        client.send(JSON.stringify({ type: \"START\" }));\r\n        \r\n    };\r\n    // return !gameState.players ? (\r\n    //     <></>\r\n    // ) : (\r\n            return (\r\n        <>\r\n            {!loggedIn ? (\r\n                <Styles.Login>\r\n                    <h1 style={{ color: \"#DDDDDD\", textAlign: \"center\" }}>\r\n                        {username}\r\n                    </h1>\r\n                    <Styles.NameInput\r\n                        onKeyUp={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                login();\r\n                            }\r\n                        }}\r\n                        onChange={(e) => {\r\n                            setUsername(e.target.value);\r\n                        }}\r\n                        type=\"text\"\r\n                    />\r\n                    <button\r\n                        className=\"btn btn-info\"\r\n                        onClick={() => {\r\n                            login();\r\n                        }}\r\n                    >\r\n                        Login\r\n                    </button>\r\n                </Styles.Login>\r\n            ) : (\r\n                <>\r\n                    <Styles.Title>\r\n                        <h1>{username}</h1>\r\n                    </Styles.Title>\r\n                    <Styles.Logout>\r\n                        <button\r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => {\r\n                                logout();\r\n                            }}\r\n                        >\r\n                            Leave\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={() => {\r\n                                start();\r\n                            }}\r\n                        >\r\n                            Join Game\r\n                        </button>\r\n                    </Styles.Logout>\r\n                    <Styles.Main>\r\n                        <Styles.Game>\r\n                            <Styles.CurrentWord>\r\n                                        Current Word: {gameState.currentWord}\r\n                                        <br/>On Turn: {gameState.players? gameState.players[gameState.playerOnTurn]? gameState.players[gameState.playerOnTurn].name:'':''}\r\n                            </Styles.CurrentWord>\r\n\r\n                            <Styles.GuessInput\r\n                                onKeyUp={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        guess();\r\n                                        e.target.value = \"\";\r\n                                    }\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    setWord(e.target.value);\r\n                                }}\r\n                                placeholder=\"Guess\"\r\n                            />\r\n                            <Styles.GuessButton\r\n                                onClick={() => {\r\n                                    guess();\r\n                                }}\r\n                                className=\"btn btn-info\"\r\n                            >\r\n                                Guess\r\n                            </Styles.GuessButton>\r\n\r\n                            <h3 id=\"message\">{gameState.message || ''}</h3>\r\n                        </Styles.Game>\r\n                        <Styles.RightPanel>\r\n                            <Styles.GuessDiv>\r\n                                <h2 style={{ marginRight: \"20px\" }}>\r\n                                    Guessed words\r\n                                </h2>\r\n                                <table>\r\n                                    <Styles.Guessed>\r\n                                                    {(gameState.guessed) ?\r\n                                                        gameState.guessed.map((guess) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>{guess}</td>\r\n                                                </tr>\r\n                                            );\r\n                                        }):<></>}\r\n                                    </Styles.Guessed>\r\n                                </table>\r\n                            </Styles.GuessDiv>\r\n                        </Styles.RightPanel>\r\n                        <Styles.PlayersDiv>\r\n                            <h3>Players logged in</h3>\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td>Name</td>\r\n                                    </tr>\r\n                                    {gameState.players?gameState.players.map((player) => {\r\n                                        return (\r\n                                            <tr>\r\n                                                <td>{player.name}</td>\r\n                                            </tr>\r\n                                        );\r\n                                    }):<></>}\r\n                                </thead>\r\n                                <tbody id=\"players\"></tbody>\r\n                            </table>\r\n                        </Styles.PlayersDiv>\r\n                    </Styles.Main>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n//import { useSelector } from \"react-redux\";\r\n\r\n\r\nexport default  () => {\r\n    return (\r\n        \r\n        < > </>\r\n        )\r\n}","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './components/Home'\r\nimport Deadends from './components/Deadends/index'\r\nimport Anagrams from './components/Anagrams'\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            \r\n                <Switch>\r\n                   \r\n                    <Route path=\"/\" exact component={Deadends} />\r\n                    <Route path=\"/deadend\" exact component={Deadends} />\r\n                    <Route path=\"/anagrams\" exact component={Anagrams} />\r\n                </Switch>\r\n            \r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const initState = {\r\n    message: \"\",\r\n    user: {},\r\n    gameState: {\r\n        numPlayers: 0,\r\n        playerOnTurn: 0,\r\n        currentWord: \"\",\r\n        guessed: [],\r\n        players: [\r\n            {name:''}\r\n        ],\r\n        fails: [],\r\n        message:''\r\n    },\r\n    loggedIn: false,\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case \"START\":\r\n            console.log('reducing start',action.payload)\r\n            newState.gameState = action.payload;\r\n            console.log('newState',newState)\r\n            return newState;\r\n        case \"LOGIN\":\r\n            \r\n            newState.user = { name: action.payload };\r\n            newState.loggedIn = true;\r\n            \r\n            return newState;\r\n        case \"LOGOUT\":\r\n            newState.user = {};\r\n            newState.loggedIn = false;\r\n            newState.message=''\r\n            return newState;\r\n        case \"GUESS\":\r\n            newState.message = action.payload;\r\n            return newState;\r\n        case \"GET_GAME_STATE\":\r\n            newState.gameState = action.payload;\r\n            return newState;\r\n        default:\r\n            return newState;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./redux/reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}