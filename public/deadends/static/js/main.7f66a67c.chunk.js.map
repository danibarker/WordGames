{"version":3,"sources":["styled components/Deadends/index.js","components/Deadends/ws.js","redux/actions.js","components/Chat/index.js","components/Deadends/index.js","components/Anagrams/index.js","App.js","redux/reducer.js","reportWebVitals.js","index.js"],"names":["components","PlayersDiv","styled","div","GuessDiv","CurrentWord","h3","Main","Logout","Login","Game","RightPanel","OnTurn","NameInput","input","GuessButton","button","GuessInput","Title","Guessed","tbody","Timer","callback","timerCalc","this","timer","tries","clearTimeout","setTimeout","CustomSocket","url","messageFunction","customSocket","socketUrl","reconnectTimer","disconnect","connect","reconnectAfterMs","WebSocket","onopen","event","console","log","onclose","scheduleTimeout","onerror","onmessage","close","message","send","readMessages","dispatch","a","type","getGameState","gameState","payload","NumberMessages","props","chatOpen","TextArea","ChatInput","ChatWindow","fullScreen","visible","ChatBubble","radius","newMessages","top","Chat","client","username","useState","setChatOpen","chatlog","useSelector","state","loggedIn","useDispatch","onClick","cur","split","map","index","style","marginBlockEnd","onKeyPress","e","key","target","value","JSON","stringify","data","placeholder","setInterval","fetch","host","window","location","href","Deadends","word","setWord","validate","response","parse","loginAction","then","refresh","logoutAction","startAction","useEffect","login","guess","className","currentWord","players","playerOnTurn","name","onKeyUp","onChange","id","marginRight","guessed","player","setUsername","replace","App","path","exact","component","Anagrams","initState","user","numPlayers","fails","reducer","action","newState","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","store","createStore","applyMiddleware","thunk","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7f66a67c.chunk.js","sourcesContent":["import styled from \"styled-components\";\r\n\r\nlet components = {\r\n    PlayersDiv: styled.div`\r\n        margin-bottom:100px;\r\n        @media only screen and (max-height: 600px) {\r\n            position: absolute;\r\n            top: -1000px;\r\n        }\r\n        @media only screen and (min-width: 701px) {\r\n            width:30vw;\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            \r\n            text-align: center;\r\n            width: 100%;\r\n            height: 15vh;\r\n            overflow-y: auto;\r\n\r\n            &::-webkit-scrollbar {\r\n                width: 12px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-track {\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n                box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.3);\r\n                border-radius: 10px;\r\n            }\r\n\r\n            &::-webkit-scrollbar-thumb {\r\n                border-radius: 10px;\r\n                -webkit-box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);\r\n                box-shadow: inset 0 0 6px rgba(0, 0, 0, 0.5);\r\n            }\r\n        }\r\n    `,\r\n    GuessDiv: styled.div`\r\n        height: 90%;\r\n        overflow-y: auto;\r\n        ::-webkit-scrollbar {\r\n            width: 10px;\r\n        }\r\n        ::-webkit-scrollbar-track {\r\n            box-shadow: inset 0 0 5px grey;\r\n            background: #222;\r\n        }\r\n        ::-webkit-scrollbar-thumb {\r\n            background-image: linear-gradient(\r\n                to right,\r\n                #222,\r\n                hsl(272, 36%, 63%)\r\n            );\r\n            border-radius: 50px;\r\n            width: 5px;\r\n        }\r\n        ::-webkit-scrollbar-thumb:hover {\r\n            background: #555;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            height: 100%;\r\n            overflow-y: auto;\r\n        }\r\n        @media only screen and (min-width: 700px) {\r\n            \r\n            width:25vw;\r\n            overflow-y: auto;\r\n        }\r\n    `,\r\n    CurrentWord: styled.h3``,\r\n\r\n    Main: styled.div`\r\n        display: flex;\r\n        height: 100%;\r\n\r\n        @media only screen and (max-width: 700px) {\r\n            display: flex;\r\n            justify-content: space-between;\r\n            height: 100%;\r\n            width: 100%;\r\n\r\n            flex-direction: column;\r\n        }\r\n    `,\r\n    Logout: styled.div`\r\n        z-index: 3;\r\n        position: absolute;\r\n        bottom: 20px;\r\n        left: 20px;\r\n\r\n   \r\n        @media only screen and (max-width: 700px) {\r\n            bottom: 0%;\r\n            button {\r\n                height: 50px;\r\n                margin-bottom: 5px;\r\n            }\r\n        }\r\n    `,\r\n    Login: styled.div`\r\n        top: 40vh;\r\n        width: 100%;\r\n        z-index: 3;\r\n        position: absolute;\r\n        height: 100%;\r\n        text-align: center;\r\n\r\n        @media only screen and (max-width: 700px) {\r\n            input {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n            button {\r\n                width: 100%;\r\n                height: 50px;\r\n            }\r\n        }\r\n    `,\r\n    Game: styled.div`\r\n        \r\n        @media only screen and (min-width: 701px) {\r\n            width:35vw;\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            width: 100%;\r\n            height: 40vh;\r\n            min-height: 100px;\r\n            text-align: center;\r\n        }\r\n    `,\r\n    RightPanel: styled.div`\r\n        max-height: 100%;\r\n        display: flex;\r\n        flex-direction: column;\r\n        align-items: center;\r\n\r\n        @media only screen and (min-width: 701px) {\r\n            width:25vw;\r\n            margin-left: 20px;\r\n            margin-right: 20px;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            width: 100%;\r\n            height: 30vh;\r\n            text-align: center;\r\n            display: unset;\r\n        }\r\n    `,\r\n    OnTurn: styled.div``,\r\n    NameInput: styled.input`\r\n        @media only screen and (min-width: 701px) {\r\n            height: 50px;\r\n            font-size: 15px;\r\n        }\r\n    `,\r\n    GuessButton: styled.button`\r\n        @media only screen and (max-height: 450px) {\r\n            position: absolute;\r\n            top: -1000px;\r\n            width: 100%;\r\n        }\r\n        @media only screen and (min-width: 701px) {\r\n            margin: 10px 0 10px 0;\r\n            width:90%;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            height: 50px;\r\n            margin-bottom: 20px;\r\n            width:100%;\r\n        }\r\n    `,\r\n    GuessInput: styled.input`\r\n        @media only screen and (min-width: 701px) {\r\n            padding-left: 10px;\r\n            height: 50px;\r\n            font-size: 20px;\r\n            width: 90%;\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            height: 50px;\r\n            width: 100%;\r\n        }\r\n    `,\r\n    Title: styled.div`\r\n        @media only screen and (min-width: 701px) {\r\n            position: absolute;\r\n            text-align: center;\r\n            width: 100%;\r\n            h1 {\r\n                font-size: 100px;\r\n            }\r\n        }\r\n        @media only screen and (max-width: 700px) {\r\n            position: absolute;\r\n        }\r\n    `,\r\n\r\n    Guessed: styled.tbody``,\r\n};\r\nexport default components;\r\n","class Timer {\r\n    constructor(callback, timerCalc) {\r\n        this.callback = callback;\r\n        this.timerCalc = timerCalc;\r\n        this.timer = null;\r\n        this.tries = 0;\r\n    }\r\n\r\n    reset() {\r\n        this.tries = 0;\r\n        clearTimeout(this.timer);\r\n    }\r\n\r\n    scheduleTimeout() {\r\n        clearTimeout(this.timer);\r\n        this.timer = setTimeout(() => {\r\n            this.tries = this.tries + 1;\r\n            this.callback();\r\n        }, this.timerCalc(this.tries + 1));\r\n    }\r\n}\r\nexport default class CustomSocket {\r\n    // Constructor which takes socket URL as parameter\r\n    constructor(url, messageFunction) {\r\n        this.customSocket = null;\r\n        this.socketUrl = url;\r\n        this.reconnectTimer = new Timer(() => {\r\n            this.disconnect();\r\n            this.connect();\r\n        }, this.reconnectAfterMs);\r\n        this.messageFunction = messageFunction;\r\n    }\r\n\r\n    // Reconnect time intervals based on tries\r\n    reconnectAfterMs(tries) {\r\n        return [1000, 2000, 5000, 10000][tries - 1] || 10000;\r\n    }\r\n\r\n    // Create socket and define socket methods\r\n    connect() {\r\n        // Create new socket\r\n        this.customSocket = new WebSocket(this.socketUrl);\r\n\r\n        // onopen - called when connection is open and ready to send and receive data.\r\n        this.customSocket.onopen = (event) => {\r\n            console.log(\"connected to \" + this.socketUrl);\r\n        };\r\n\r\n        // onclsoe - called when the connection's closes.\r\n        this.customSocket.onclose = (event) => {\r\n            // On connection close try again to connect\r\n            this.reconnectTimer.scheduleTimeout();\r\n        };\r\n\r\n        // onerror - called when an error occurs.\r\n        this.customSocket.onerror = (event) => {};\r\n\r\n        // onmessage - called when a message is received from the server.\r\n        this.customSocket.onmessage = this.messageFunction;\r\n    }\r\n\r\n    // close socket connection\r\n    disconnect() {\r\n        // resetting in close method to stop timer on disconnect\r\n        this.customSocket.onclose = function () {};\r\n        // Closing socket\r\n        this.customSocket.close();\r\n    }\r\n    send(message) {\r\n        this.customSocket.send(message);\r\n    }\r\n}\r\n","export const readMessages = () => {\r\n    return async (dispatch) => {\r\n        dispatch({type:\"READ_MESSAGES\"})\r\n    }\r\n}\r\nexport const startAction = (gameState) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\"http://localhost:5001/start\");\r\n        dispatch({\r\n            type: \"START\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\nexport const setUsername = (username) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: \"USERNAME\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\nexport const chatAction = (chatlog) => {\r\n    return async (dispatch) => {\r\n        dispatch({\r\n            type: \"CHAT\",\r\n            payload: chatlog,\r\n        });\r\n    };\r\n};\r\nexport const loginAction = (username) => {\r\n    return async (dispatch) => {\r\n        // let response = await Axios.get(\r\n        //     `http://localhost:5001/login/${username}`\r\n        // );\r\n        // let name = response.data;\r\n        dispatch({\r\n            type: \"LOGIN\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\nexport const logoutAction = (username) => {\r\n    return (dispatch) => {\r\n        dispatch({\r\n            type: \"LOGOUT\",\r\n            payload: username,\r\n        });\r\n    };\r\n};\r\n\r\nexport const guessAction = (validate) => {\r\n    return async (dispatch) => {\r\n        // const body = { name: player, guess: word };\r\n        // let response = await Axios.post(\"http://localhost:5001/guess\", body);\r\n        //response example {loseTurn:false,valid:false,message:\"Reset\"}\r\n\r\n        dispatch({\r\n            type: \"GUESS\",\r\n            payload: validate,\r\n        });\r\n    };\r\n};\r\n\r\nexport const getGameState = (gameState) => {\r\n    return async (dispatch) => {\r\n        // const response = await Axios.get(\"http://localhost:5001/gameState\");\r\n        // const data = response.data\r\n\r\n        dispatch({\r\n            type: \"GET_GAME_STATE\",\r\n            payload: gameState,\r\n        });\r\n    };\r\n};\r\n","import React, { useState } from \"react\";\r\nimport styled from \"styled-components\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { useSelector } from \"react-redux\";\r\n\r\nconst Chat = ({ readMessages, client, username }) => {\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const chatlog = useSelector((state) => state.chatlog);\r\n    const loggedIn = useSelector((state) => state.loggedIn);\r\n    const newMessages = useSelector((state) => state.newMessages);\r\n    const dispatch = useDispatch();\r\n    console.log(newMessages);\r\n    const sendChat = (message) => {\r\n        client.send(\r\n            JSON.stringify({\r\n                type: \"CHAT\",\r\n                data: { username: username, message: message },\r\n            })\r\n        );\r\n    };\r\n    return (\r\n        <>\r\n            \r\n            <ChatBubble\r\n                onClick={() => {\r\n                    setChatOpen((cur) => !cur);\r\n                    dispatch(readMessages());\r\n                }}\r\n                top={chatOpen ? 0 : 0}\r\n                newMessages={!chatOpen && newMessages ? \"red\" : \"inherit\"}\r\n                visible={loggedIn && \"visible\"}\r\n            ><NumberMessages chatOpen={chatOpen ? \"hidden\" : \"visible\"}>\r\n                {newMessages > 0 ? newMessages : \"\"}\r\n            </NumberMessages></ChatBubble>\r\n            \r\n           \r\n            <ChatWindow\r\n                fullScreen={loggedIn ? \"visible\" : \"hidden\"}\r\n                visible={chatOpen && loggedIn ? \"visible\" : \"hidden\"}\r\n            >\r\n                <TextArea>\r\n                    {chatlog.split(\"\\n\").map((message, index) => (\r\n                        <>\r\n                            <p style={{ marginBlockEnd: (index % 2) + \"rem\" }}>\r\n                                {message}{\" \"}\r\n                            </p>\r\n                        </>\r\n                    ))}\r\n                </TextArea>\r\n                <ChatInput\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === \"Enter\") {\r\n                            sendChat(e.target.value);\r\n                            e.target.value = \"\";\r\n                        }\r\n                    }}\r\n                    placeholder=\"Chat\"\r\n                />\r\n            </ChatWindow>\r\n        </>\r\n    );\r\n};\r\nlet NumberMessages = styled.div`\r\n    background-color: rgba(0, 0, 0, 0);\r\n    color: red;\r\n    font-size: 25px;\r\n    margin: 0;\r\n    cursor: pointer;\r\n    visibility: ${(props) => props.chatOpen};\r\n    /* @media only screen and (min-width: 700px) {\r\n        visibility: hidden;\r\n    } */\r\n`;\r\nlet TextArea = styled.div`\r\n    height: 70%;\r\n    height: 60vh;\r\n    border-style: solid;\r\n    overflow: auto;\r\n    padding: 10px 0 0 5px;\r\n    line-height: 0.75;\r\n    ::-webkit-scrollbar {\r\n        width: 10px;\r\n    }\r\n    ::-webkit-scrollbar-track {\r\n        box-shadow: inset 0 0 5px grey;\r\n        background: #222;\r\n    }\r\n    ::-webkit-scrollbar-thumb {\r\n        background-image: linear-gradient(to right, #222, hsl(272, 36%, 63%));\r\n        border-radius: 50px;\r\n        width: 5px;\r\n    }\r\n    ::-webkit-scrollbar-thumb:hover {\r\n        background: #555;\r\n    }\r\n`;\r\nlet ChatInput = styled.input`\r\n    width: 100%;\r\n    height: 50px;\r\n`;\r\nlet ChatWindow = styled.div`\r\n    bottom: 0;\r\n\r\n    position: absolute;\r\n\r\n    right: 0;\r\n    width: 33vw;\r\n\r\n    z-index: 4;\r\n    background-color: black;\r\n    position: absolute;\r\n    color: #1f9bcf;\r\n    font-weight: 600;\r\n    visibility: ${(props) => props.fullScreen || \"hidden\"};\r\n    @media only screen and (max-width: 700px) {\r\n        width: 90%;\r\n        right: unset;\r\n        bottom: unset;\r\n        left: 5%;\r\n        top: 45px;\r\n        visibility: ${(props) => props.visible || \"hidden\"};\r\n    }\r\n`;\r\nlet ChatBubble = styled.div`\r\n    border-radius: ${(props) => props.radius || 50}%;\r\n    width: 45px;\r\n    height: 45px;\r\n    position: absolute;\r\n    border-style: solid;\r\n    z-index: 5;\r\n    right: 0;\r\n    border-color: ${(props) => props.newMessages};\r\n    top: ${(props) => props.top}%;\r\n    visibility: ${(props) => props.visible || \"hidden\"};\r\n    @media only screen and (min-width: 700px) {\r\n        visibility: hidden;\r\n    }\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`;\r\nexport default Chat;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport { useSelector } from \"react-redux\";\r\nimport Styles from \"../../styled components/Deadends\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { w3cwebsocket as WS } from \"websocket\";\r\n\r\nimport CustomSocket from \"./ws\";\r\nimport {\r\n    loginAction,\r\n    logoutAction,\r\n    guessAction,\r\n    getGameState,\r\n    startAction,\r\n    chatAction,\r\n    setUsername,\r\n    readMessages\r\n} from \"../../redux/actions\";\r\nimport Chat from \"../Chat\";\r\nsetInterval(() => {\r\n    fetch('/keepAlive')\r\n}, 60000);\r\nlet host = window.location.href;\r\nhost = host.replace(\"http\", \"ws\");\r\nhost = host.replace(\"3000\", \"5002\");\r\n\r\nexport default function Deadends() {\r\n    const gameState = useSelector((state) => state.gameState);\r\n    const username = useSelector((state) => state.username);\r\n    // const [username, setUsername] = useState(\"\");\r\n    const [chatOpen, setChatOpen] = useState(false);\r\n    const [word, setWord] = useState(\"\");\r\n\r\n    const dispatch = useDispatch();\r\n    function messageFunction(message) {\r\n        let response = JSON.parse(message.data);\r\n        switch (response.type) {\r\n            case \"CHAT\":\r\n                dispatch(chatAction(response.data));\r\n                break;\r\n            case \"RESET\":\r\n                dispatch(getGameState(response.data));\r\n                break;\r\n            case \"LOGIN\":\r\n                dispatch(loginAction(response.data));\r\n\r\n                break;\r\n            case \"GUESS\":\r\n                dispatch(guessAction(response.data)).then(() => {\r\n                    refresh();\r\n                });\r\n                break;\r\n            case \"GAME_STATE\":\r\n                dispatch(getGameState(response.data));\r\n                break;\r\n            case \"LOGOUT\":\r\n                dispatch(logoutAction(response.data));\r\n\r\n                break;\r\n            case \"START\":\r\n                dispatch(startAction(response.data));\r\n\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        // dispatch(getGameState(response.data));\r\n    }\r\n    const [client, setClient] = useState(\r\n        new CustomSocket(host, messageFunction)\r\n    );\r\n    useEffect(() => {\r\n        client.connect();\r\n    }, [client]);\r\n    const login = () => {\r\n        client.send(JSON.stringify({ type: \"LOGIN\", data: username }));\r\n    };\r\n\r\n    const loggedIn = useSelector((state) => state.loggedIn);\r\n    const refresh = () => {\r\n        client.send(JSON.stringify({ type: \"GAME_STATE\", data: gameState }));\r\n    };\r\n    const guess = () => {\r\n        client.send(\r\n            JSON.stringify({\r\n                type: \"GUESS\",\r\n                data: { username: username, guess: word },\r\n            })\r\n        );\r\n    };\r\n    const reset = () => {\r\n        client.send(JSON.stringify({ type: \"RESET\" }));\r\n    };\r\n    const logout = () => {\r\n        client.send(JSON.stringify({ type: \"LOGOUT\", data: username }));\r\n    };\r\n    const start = () => {\r\n        client.send(JSON.stringify({ type: \"START\" }));\r\n    };\r\n    // return !gameState.players ? (\r\n    //     <></>\r\n    // ) : (\r\n    return (\r\n        <>\r\n            <Chat readMessages={readMessages} client={client} username={username} />\r\n            {!loggedIn ? (\r\n                <Styles.Login>\r\n                    <Styles.NameInput\r\n                        onKeyUp={(e) => {\r\n                            if (e.key === \"Enter\") {\r\n                                login();\r\n                            }\r\n                        }}\r\n                        onChange={(e) => {\r\n                            dispatch(setUsername(e.target.value));\r\n                        }}\r\n                        type=\"text\"\r\n                    />\r\n                    <button\r\n                        className=\"btn btn-info\"\r\n                        onClick={() => {\r\n                            login();\r\n                        }}\r\n                    >\r\n                        Login\r\n                    </button>\r\n                </Styles.Login>\r\n            ) : (\r\n                <>\r\n                    <Styles.Title\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        {/* <h1>Deadends</h1> */}\r\n                    </Styles.Title>\r\n                    <Styles.Logout\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        <button\r\n                            className=\"btn btn-danger\"\r\n                            onClick={() => {\r\n                                logout();\r\n                            }}\r\n                        >\r\n                            Leave\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={() => {\r\n                                start();\r\n                            }}\r\n                        >\r\n                            Join Game\r\n                        </button>\r\n                        <button\r\n                            className=\"btn btn-success\"\r\n                            onClick={() => {\r\n                                reset();\r\n                            }}\r\n                        >\r\n                            Reset All\r\n                        </button>\r\n                    </Styles.Logout>\r\n                    <Styles.Main\r\n                        onClick={() => {\r\n                            setChatOpen(false);\r\n                        }}\r\n                    >\r\n                        <Styles.Game>\r\n                            <Styles.CurrentWord>\r\n                                Current Word: {gameState.currentWord}\r\n                                <br />\r\n                                On Turn:\r\n                                {gameState.players\r\n                                    ? gameState.players[gameState.playerOnTurn]\r\n                                        ? gameState.players[\r\n                                              gameState.playerOnTurn\r\n                                          ].name\r\n                                        : \"\"\r\n                                    : \"\"}\r\n                            </Styles.CurrentWord>\r\n\r\n                            <Styles.GuessInput\r\n                                onKeyUp={(e) => {\r\n                                    if (e.key === \"Enter\") {\r\n                                        guess();\r\n                                        e.target.value = \"\";\r\n                                    }\r\n                                }}\r\n                                onChange={(e) => {\r\n                                    setWord(e.target.value);\r\n                                }}\r\n                                placeholder={\r\n                                    gameState.players\r\n                                        ? gameState.players[\r\n                                              gameState.playerOnTurn\r\n                                          ]\r\n                                            ? gameState.players[\r\n                                                  gameState.playerOnTurn\r\n                                              ].name === username\r\n                                                ? \"Your turn.  Enter Guess\"\r\n                                                : gameState.players[\r\n                                                      gameState.playerOnTurn\r\n                                                  ].name +\r\n                                                  \"'s turn.  Please Wait\"\r\n                                            : \"\"\r\n                                        : \"\"\r\n                                }\r\n                            />\r\n                            <Styles.GuessButton\r\n                                onClick={() => {\r\n                                    guess();\r\n                                }}\r\n                                className=\"btn btn-info\"\r\n                            >\r\n                                Guess\r\n                            </Styles.GuessButton>\r\n\r\n                            <h3 id=\"message\">{gameState.message || \"\"}</h3>\r\n                        </Styles.Game>\r\n                        <Styles.RightPanel>\r\n                            <Styles.GuessDiv>\r\n                                <h3 style={{ marginRight: \"20px\" }}>\r\n                                    Guessed words\r\n                                </h3>\r\n                                <table>\r\n                                    <Styles.Guessed>\r\n                                        {gameState.guessed ? (\r\n                                            gameState.guessed.map((guess) => {\r\n                                                return (\r\n                                                    <tr>\r\n                                                        <td>{guess}</td>\r\n                                                    </tr>\r\n                                                );\r\n                                            })\r\n                                        ) : (\r\n                                            <></>\r\n                                        )}\r\n                                    </Styles.Guessed>\r\n                                </table>\r\n                            </Styles.GuessDiv>\r\n                        </Styles.RightPanel>\r\n                        <Styles.PlayersDiv>\r\n                            <h3>Players logged in</h3>\r\n                            <table className=\"table table-striped\">\r\n                                <thead>\r\n                                    <tr>\r\n                                        <td>Name</td>\r\n                                    </tr>\r\n                                    {gameState.players ? (\r\n                                        gameState.players.map((player) => {\r\n                                            return (\r\n                                                <tr>\r\n                                                    <td>{player.name}</td>\r\n                                                </tr>\r\n                                            );\r\n                                        })\r\n                                    ) : (\r\n                                        <></>\r\n                                    )}\r\n                                </thead>\r\n                                <tbody id=\"players\"></tbody>\r\n                            </table>\r\n                        </Styles.PlayersDiv>\r\n                    </Styles.Main>\r\n                </>\r\n            )}\r\n        </>\r\n    );\r\n}\r\n","import React from 'react'\r\n//import { useSelector } from \"react-redux\";\r\n\r\n\r\nexport default  () => {\r\n    return (\r\n        \r\n        < > </>\r\n        )\r\n}","import { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\r\nimport './App.css';\r\nimport Home from './components/Home'\r\nimport Deadends from './components/Deadends/index'\r\nimport Anagrams from './components/Anagrams'\r\nfunction App() {\r\n    return (\r\n        <Router>\r\n            \r\n                <Switch>\r\n                   \r\n                    <Route path=\"/\" exact component={Deadends} />\r\n                    <Route path=\"/deadend\" exact component={Deadends} />\r\n                    <Route path=\"/anagrams\" exact component={Anagrams} />\r\n                </Switch>\r\n            \r\n        </Router>\r\n    );\r\n}\r\n\r\nexport default App;\r\n","const initState = {\r\n    newMessages: 0,\r\n    message: \"\",\r\n    username: \"\",\r\n    user: {},\r\n    chatlog: \"\",\r\n    gameState: {\r\n        numPlayers: 0,\r\n        playerOnTurn: 0,\r\n        currentWord: \"\",\r\n        guessed: [],\r\n        players: [],\r\n        fails: [],\r\n        message: \"\",\r\n    },\r\n    loggedIn: false,\r\n};\r\n\r\nconst reducer = (state = initState, action) => {\r\n    let newState = { ...state };\r\n    switch (action.type) {\r\n        case \"READ_MESSAGES\":\r\n            newState.newMessages = 0;\r\n            return newState;\r\n        case \"USERNAME\":\r\n            newState.username = action.payload;\r\n            return newState;\r\n        case \"CHAT\":\r\n            newState.chatlog = action.payload;\r\n            newState.newMessages += 1;\r\n            return newState;\r\n        case \"START\":\r\n            newState.gameState = action.payload;\r\n            return newState;\r\n        case \"LOGIN\":\r\n            if (newState.username === action.payload) {\r\n                newState.user = { name: action.payload };\r\n                newState.loggedIn = true;\r\n            }\r\n\r\n            return newState;\r\n        case \"LOGOUT\":\r\n            if (action.payload === newState.username) {\r\n                newState.user = {};\r\n                newState.username = \"\";\r\n                newState.loggedIn = false;\r\n                newState.message = \"\";\r\n            }\r\n            return newState;\r\n        case \"GUESS\":\r\n            newState.message = action.payload;\r\n            return newState;\r\n        case \"GET_GAME_STATE\":\r\n            newState.gameState = action.payload;\r\n            if (action.payload.numPlayers === 0) {\r\n                newState.loggedIn = false;\r\n                newState.message = \"\";\r\n                newState.user = {};\r\n            }\r\n            return newState;\r\n        default:\r\n            return newState;\r\n    }\r\n};\r\n\r\nexport default reducer;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { useState } from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport { applyMiddleware, createStore } from \"redux\";\r\nimport { Provider } from \"react-redux\";\r\nimport reducer from \"./redux/reducer\";\r\nimport thunk from \"redux-thunk\";\r\nimport reportWebVitals from \"./reportWebVitals\";\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <Provider store={store}>\r\n            <App />\r\n        </Provider>\r\n    </React.StrictMode>,\r\n    document.getElementById(\"root\")\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}